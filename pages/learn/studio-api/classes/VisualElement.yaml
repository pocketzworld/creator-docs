name: VisualElement
type: classes
summary: Creates a new instance of VisualElement. This is the basic building block for UI elements, offering foundational features like layout, styling, and rendering.
description:
code_samples:
inherits:
constructors:
  - name: new
    summary: Creates a new VisualElement.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      ```
    parameters:
    returns:
      - type: Class.VisualElement
        summary:
properties:
  - name: viewDataKey
    summary: A unique identifier for storing view-related data associated with this element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.viewDataKey = "myElement"
      ```
    type: string
  - name: canGrabFocus
    summary: Indicates whether the element can capture user focus. This is useful for determining if the element is interactive.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.canGrabFocus = true
      ```
    type: boolean
  - name: layout
    summary: Defines the layout type of the element, which influences how it arranges its children.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.layout = Layout.Flex
      ```
    type: DataType.Rect
  - name: contentRect
    summary: Represents the rectangular area that contains the element's content, typically used for layout calculations.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.contentRect = Rect.new(0, 0, 100, 100)
      ```
    type: DataType.Rect
  - name: worldBound
    summary: The global (world) bounds of the element, indicating its position and size within the overall UI.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local worldBound = myElement.worldBound
      ```
    type: DataType.Rect
  - name: localBound
    summary: The local bounds of the element, representing its position and size relative to its parent.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local localBound = myElement.localBound
      ```
    type: DataType.Rect
  - name: worldTransform
    summary: The world transform of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local worldTransform = myElement.worldTransform
      ```
    type: DataType.Matrix4x4
  - name: name
    summary: The name of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.name = "myElement"
      ```
    type: string
  - name: enabledInHierarchy
    summary: Determines if the element is enabled in the hierarchy.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local enabledInHierarchy = myElement.enabledInHierarchy
      ```
    type: boolean
  - name: enabledSelf
    summary: Determines if the element is enabled.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.enabledSelf = true
      ```
    type: boolean
  - name: visible
    summary: Determines if the element is visible.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.visible = true
      ```
    type: boolean
  - name: parent
    summary: The parent of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local parent = myElement.parent
      ```
    type: Class.VisualElement
  - name: contentContainer
    summary: The content container of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local contentContainer = myElement.contentContainer
      ```
    type: Class.VisualElement
  - name: childCount
    summary: The number of children of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local childCount = myElement.childCount

      print(childCount)
      ```
    type: number
  - name: style
    summary: The style of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.style = IStyle.new()
      ```
    type: IStyle
  - name: tooltip
    summary: The tooltip of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement.tooltip = "This is a tooltip"
      ```
    type: string
  - name: disabledUssClassName
    summary:
    description:
    is_static: true
    code_samples:
    type: string
methods:
  - name: Q
    summary: Query the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local query = myElement:Q("myQuery")
      ```
    parameters:
      - name: name
        type: string
        default:
        summary:
    returns:
      - type: Class.VisualElement
        summary:
  - name: RegisterCallback
    summary: Register a callback.

    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local myCallback = function()
        -- Do something
      end

      myElement:RegisterCallback(myCallback, function()
        print("Callback called")
      end)
      ```
    parameters:
    returns:
      - type: string
        summary:
  - name: RegisterPressCallback
    summary: Register a press callback.

    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local myCallback = function()
        -- Do something
      end

      myElement:RegisterPressCallback(function()
        print("Press callback called")
      end)
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: RegisterLongPressCallback
    summary: Register a long press callback.

    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local myCallback = function()
        -- Do something
      end

      myElement:RegisterLongPressCallback(function()
        print("Long press callback called")
      end)
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: Focus
    summary: Focus the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:Focus()
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: SetEnabled
    summary: Set the enabled state of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:SetEnabled(true) -- Or false
      ```
    parameters:
      - name: value
        type: boolean
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: MarkDirtyRepaint
    summary: Mark the element as dirty for repaint.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:MarkDirtyRepaint()
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: ContainsPoint
    summary: Check if the element contains a point.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local containsPoint = myElement:ContainsPoint(Vector2.new(0, 0))
      ```
    parameters:
      - name: localPoint
        type: DataType.Vector2
        default:
        summary:
    returns:
      - type: boolean
        summary:
  - name: Overlaps
    summary: Check if the element overlaps with another element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local otherElement = VisualElement.new()
      local overlaps = myElement:Overlaps(otherElement)
      ```
    parameters:
      - name: rectangle
        type: DataType.Rect
        default:
        summary:
    returns:
      - type: boolean
        summary:
  - name: ClearClassList
    summary: Clear the class list of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:ClearClassList()
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: AddToClassList
    summary: Add a class to the class list of the
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:AddToClassList("myClass")
      ```
    parameters:
      - name: className
        type: string
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: RemoveFromClassList
    summary: Remove a class from the class list of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:RemoveFromClassList("myClass")
      ```
    parameters:
      - name: className
        type: string
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: ToggleInClassList
    summary: Toggle a class in the class list of the element. 
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:ToggleInClassList("myClass")
      ```
    parameters:
      - name: className
        type: string
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: EnableInClassList
    summary: Enable a class in the class list of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:EnableInClassList("myClass")
      ```
    parameters:
      - name: className
        type: string
        default:
        summary:
      - name: enable
        type: boolean
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: ClassListContains
    summary: Check if the class list of the element contains a class.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local classListContains = myElement:ClassListContains("myClass")
      ```
    parameters:
      - name: cls
        type: string
        default:
        summary:
    returns:
      - type: boolean
        summary:
  - name: Add
    summary: Adds a child element to this element's hierarchy, making it a part of the visual tree.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local child = VisualElement.new()
      myElement:Add(child)
      ```
    parameters:
      - name: child
        type: Class.VisualElement
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: Insert
    summary: Insert a child at a specific index.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local child = VisualElement.new()
      myElement:Insert(0, child)
      ```
    parameters:
      - name: index
        type: number
        default:
        summary:
      - name: element
        type: Class.VisualElement
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: Remove
    summary: Removes a specified child element from this element's hierarchy.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local child = VisualElement.new()
      myElement:Remove(child)
      ```
    parameters:
      - name: element
        type: Class.VisualElement
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: RemoveAt
    summary: Remove a child at a specific index.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:RemoveAt(0)
      ```
    parameters:
      - name: index
        type: number
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: Clear
    summary: Clear all children of the element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:Clear()
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: ElementAt
    summary: Get a child at a specific index.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local element = myElement:ElementAt(0)
      ```
    parameters:
      - name: index
        type: number
        default:
        summary:
    returns:
      - type: Class.VisualElement
        summary:
  - name: IndexOf
    summary: Get the index of a child.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local index = myElement:IndexOf(VisualElement.new())
      ```
    parameters:
      - name: element
        type: Class.VisualElement
        default:
        summary:
    returns:
      - type: number
        summary:
  - name: BringToFront
    summary: Bring the element to the front.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:BringToFront()
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: SendToBack
    summary: Send the element to the back.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:SendToBack()
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: PlaceBehind
    summary: Positions this element immediately behind a specified sibling element within the same parent.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local sibling = VisualElement.new()
      myElement:PlaceBehind(sibling)
      ```
    parameters:
      - name: sibling
        type: Class.VisualElement
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: PlaceInFront
    summary: Positions this element immediately in front of a specified sibling element within the same parent.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local sibling = VisualElement.new()
      myElement:PlaceInFront(sibling)
      ```
    parameters:
      - name: sibling
        type: Class.VisualElement
        default:
        summary:
    returns:
      - type: void
        summary:
  - name: RemoveFromHierarchy
    summary: Detaches this element from its parent, removing it from the visual tree.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      myElement:RemoveFromHierarchy()
      ```
    parameters:
    returns:
      - type: void
        summary:
  - name: Contains
    summary: Checks if this element includes a specified child element within its hierarchy.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local child = VisualElement.new()
      local contains = myElement:Contains(child)
      ```
    parameters:
      - name: child
        type: Class.VisualElement
        default:
        summary:
    returns:
      - type: boolean
        summary:
  - name: FindCommonAncestor
    summary: Finds the closest common ancestor shared by this element and another specified element.
    description:
    is_static: false
    code_samples: |
      ```lua
      local myElement = VisualElement.new()
      local otherElement = VisualElement.new()
      local commonAncestor = myElement:FindCommonAncestor(otherElement)
      ```
    parameters:
      - name: other
        type: Class.VisualElement
        default:
        summary:
    returns:
      - type: Class.VisualElement
        summary:
