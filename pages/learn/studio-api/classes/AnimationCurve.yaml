name: AnimationCurve
type: classes
summary: |
  The AnimationCurve class represents a curve that defines the interpolation between keyframes over time. It's commonly used in animation systems to define smooth transitions between different values over time.

description:
code_samples: |
  #### Putting an animation curve in the inspector
  ```lua
  --!SerializeField
  local myAnimationCurve : AnimationCurve = nil
  ```
inherits:
constructors:
properties:
  - name: length
    summary: |
      The number of keys in the curve. (Read Only)
    is_static: false
    code_samples:
    type: number
methods:
  - name: Evaluate
    summary: |
      Interpolates the value from the curve at a given time point. The curve is evaluated, giving the value of the curve at that exact time. This becomes very handy when lerping between two values in a non-linear way for smoother transitions.
    is_static: false
    code_samples:
    parameters:
      - name: time
        type: number
        default:
        summary: The time at which to evaluate the curve.
    returns:
      - type: number
        summary: Returns the value of the curve at the specified time.
  - name: AddKey
    summary: |
      Tool designed to insert a new key into your AnimationCurve. A way to dynamically shape your animation by adding keyframes at certain times with specific values.
    is_static: false
    code_samples:
    parameters:
      - name: time
        type: number
        default:
        summary: The time at which the new key should be inserted.
      - name: value
        type: number
        default:
        summary: The value of the new key at the specified time.
    returns:
      - type: number
        summary: Returns the index of the added key, or of the existing key if one already exists at the given time.
  - name: ClearKeys
    summary: |
      Erase all keys from the AnimationCurve. It can be beneficial when you need to reset the curve or want to dynamically generate a new one.
    is_static: false
    code_samples:
    parameters:
    returns:
      - type: void
        summary: This method does not return a value.
  - name: RemoveKey
    summary: |
      Removes the key at a specified index from your AnimationCurve. Varying curves dynamically can lead to interesting gameplay possibilities and variation in animations.
    is_static: false
    code_samples:
    parameters:
      - name: index
        type: number
        default:
        summary: The index of the key you want to remove.
    returns:
      - type: void
        summary: This method does not return a value.
  - name: SmoothTangents
    summary: |
      Updates the tangent of a key in the AnimationCurve to create a smooth transition in the curve. This becomes essential while crafting natural and organic animations.
    is_static: false
    code_samples:
    parameters:
      - name: index
        type: number
        default:
        summary: The index of the key to update.
      - name: weight
        type: number
        default:
        summary: How much influence the tangent has. A weight of 0 will make the tangent flat.
    returns:
      - type: void
        summary: This method does not return a value.
  - name: CopyFrom
    summary: |
      Copies all settings, including all keys from the given curve. This can prove useful when you want to duplicate the behavior of an existing curve.
    is_static: false
    code_samples:
    parameters:
      - name: other
        type: Class.AnimationCurve
        default:
        summary: The source AnimationCurve to copy from.
    returns:
      - type: void
        summary: This method does not return a value.
  - name: Constant
    summary: |
      Creates a new AnimationCurve where all values are the same (constant). This can come in handy when creating a stable, unchanging behavior.
    is_static: true
    code_samples:
    parameters:
      - name: timeStart
        type: number
        default:
        summary: The starting time of the curve.
      - name: timeEnd
        type: number
        default:
        summary: The ending time of the curve.
      - name: value
        type: number
        default:
        summary: The constant value for the curve.
    returns:
      - type: Class.AnimationCurve
        summary: Returns a new AnimationCurve with a constant value.
  - name: Linear
    summary: |
      Creates a new AnimationCurve representing a linear interpolation between a start and end value (valueStart and valueEnd) over a specified time period (timeStart to timeEnd). This is particularly useful when a linear transition between two states is required over a given duration.
    is_static: true
    code_samples:
    parameters:
      - name: timeStart
        type: number
        default:
        summary: The starting time of the curve.
      - name: valueStart
        type: number
        default:
        summary: The value of the curve at the start time.
      - name: timeEnd
        type: number
        default:
        summary: The ending time of the curve.
      - name: valueEnd
        type: number
        default:
        summary: The value of the curve at the end time.
    returns:
      - type: Class.AnimationCurve
        summary: Returns a new AnimationCurve representing a linear interpolation.
  - name: EaseInOut
    summary: |
      Creates a new AnimationCurve that smoothly transitions between the start and end values over a specified time period. This method is especially useful to create animations with smooth starts and ends, providing a more natural look.
    is_static: true
    code_samples:
    parameters:
      - name: timeStart
        type: number
        default:
        summary: The starting time of the curve.
      - name: valueStart
        type: number
        default:
        summary: The value of the curve at the start time.
      - name: timeEnd
        type: number
        default:
        summary: The ending time of the curve.
      - name: valueEnd
        type: number
        default:
        summary: The value of the curve at the end time.
    returns:
      - type: Class.AnimationCurve
        summary: Returns a new AnimationCurve with smooth transitions at start and end.
math_operations:
