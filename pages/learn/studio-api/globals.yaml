name: Globals
type: globals
summary: |
  In Lua scripting, Globals are essential values or variables that can be accessed from any part of the script without the need to pass them explicitly. They are context-specific and readily available. On the other hand, a Service in Lua script is like a toolbox of static functions that offer convenient utilities for developers to use in their scripts.
description:
code_samples:
inherits:
constructors:
properties:
  - name: self
    summary: |
      The 'self' property is used to access the current script's instance. This is always the owning script of the object as a Class.LuaBehaviour. This is the primary way to get many of the core Unity MonoBehaviour methods and properties like `self.gameObject`, `self:Update` and `self:OnTriggerEnter`. It is highly recommended to familiarize yourself with the Class.LuaBehaviour documentation to understand how to use the 'self' property.
    tags:
      - ServerAndClient
    code_samples: | 
      ```lua
        local objectName = self.gameObject.name
        print("My name is: " .. objectName)
      ```
    type: Class.LuaBehaviour
  - name: client
    summary: |
      The 'client' property is used to access the current client instance. This is useful for when you want to access the client's information like the `client.localPlayer` property or `client.PlayerConnected` event. Read the Class.GameClient documentation to learn more.
    code_samples: |
      ```lua
        local localPlayer = client.localPlayer
        print("My name is: " .. localPlayer.name)
      ```
    type: Class.GameClient
  - name: server
    summary: |
      The 'server' property is used to access the current server instance. This is useful for when you want to access the server' information like the `server.PlayerConnected` event. Read the Class.GameServer documentation to learn more.
    code_samples: |
      ```lua
      server.PlayerConnected:Connect(function(player)
        print("Player connected: " .. player.name)
      end)
      ```
    tags:
      - ServerOnly
    type: Class.GameServer
  - name: scene
    summary: |
      The 'scene' property is used to access the currently active scene.
    tags:
      - ServerAndClient
    code_samples: |
      ```lua
      scene.PlayerJoined:Connect(function(scene, player)
        print("Player joined: " .. player.name)
      end)
      ```
    type: Class.Scene
methods:
  - name: defer
    summary: |
      Defers the execution of a function to the next frame. This is useful for when you want to run a function after the current frame has finished.
    tags:
      - ServerAndClient
    code_samples: |
      ```lua
        defer(function()
          print("This will run in the next frame")
        end)
      ```
    parameters:
      - name: callback
        type: function
        summary: The function to run in the next frame.
    returns:
      - type: void
        summary:
  - name: require
    summary: |
      Gets a 'Module' typed script by name as a singleton behaviour, giving access to the hierarchy it is within.

      Using the require method to retrieve a module will automatically load the singleton instance of the behaviour. This is equivalent to using Find and GetComponent to retrieve the behaviour.
    tags:
      - ServerAndClient
    code_samples: |
      ```lua
        local myModuleScript = require("MyModuleScript")
      ```
    parameters:
      - name: path
        type: string
        summary: The script name of the module to load.
    returns:
      - type: Class.LuaBehaviour
        summary: The module that was loaded.
  - name: typeof
    summary: |
      Gets the string representation of the type of the object. This is useful for debugging and logging as well as learning about what types are being returned by complex methods.
    tags:
      - ServerAndClient
    code_samples: |
      ```lua
        local v = Vector3.new(1, 2, 3)
        print(typeof(v)) -- prints "Vector3" instead of "userdata" or "(1, 2, 3)"
      ```
    parameters:
    returns:
      - type: string
        summary: The Type of the object. In question.
  - name: tostring
    summary: |
      Gets the string representation of the object if one has defined one. This is useful for debugging and logging.
    tags:
      - ServerAndClient
    code_samples: |
      ```lua
        local v = Vector3.new(1, 2, 3)
        print(tostring(v)) -- prints "(1, 2, 3)" instead of "userdata" or "Vector3"
      ```
    parameters:
    returns:
      - type: string
        summary:
