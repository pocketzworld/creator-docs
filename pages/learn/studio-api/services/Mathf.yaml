name: Mathf
type: classes
summary: Provides a comprehensive set of mathematical functions and constants for game development, including operations like absolute value, square root, and trigonometric calculations, as well as game-specific algorithms like smooth damping and lerp.

constructors:
tags:
  - ServerAndClient
properties:
  - name: PI
    summary: Represents the mathematical constant Pi for circular and trigonometric calculations.
    is_static: true
    tags:
      - ServerAndClient
    type: double
  - name: Infinity
    summary: Represents positive infinity, useful for comparisons.
    is_static: true
    code_samples: |
      ```lua
      local inf = Mathf.Infinity
      print("Positive infinity: " .. inf)
      ```
    tags:
      - ServerAndClient
    type: double
  - name: NegativeInfinity
    summary: Represents negative infinity, useful for comparisons.
    is_static: true
    code_samples: |
      ```lua
      local negInf = Mathf.NegativeInfinity
      print("Negative infinity: " .. negInf)
      ```
    tags:
      - ServerAndClient
    type: double
  - name: Deg2Rad
    summary: Conversion factor for degrees to radians.
    is_static: true
    code_samples: |
      ```lua
      local deg2Rad = Mathf.Deg2Rad
      print("Degrees to radians: " .. deg2Rad)
      ```
    tags:
      - ServerAndClient
    type: double
  - name: Rad2Deg
    summary: Conversion factor for radians to degrees.
    is_static: true
    code_samples: |
      ```lua
      local rad2Deg = Mathf.Rad2Deg
      print("Radians to degrees: " .. rad2Deg)
      ```
    tags:
      - ServerAndClient
    type: double
  - name: Epsilon
    summary: Represents the smallest positive double greater than zero, preventing division by zero errors.
    is_static: true
    code_samples: |
      ```lua
      local eps = Mathf.Epsilon
      print("Smallest positive double: " .. eps)
      ```
    tags:
      - ServerAndClient
    type: double
methods:
  - name: Abs
    summary: Calculates and returns the absolute value of its input.
    is_static: true
    code_samples: |
      ```lua
      local value = -5
      local absValue = Mathf.Abs(value)
      print("Absolute value: " .. absValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: value
        type: float
        default:
        summary: A number to find the absolute value of
    returns:
      - type: float
        summary: The absolute value of the input number.
  - name: Acos
    summary: Returns the angle in radians whose cosine is the specified number, for trigonometric math operations.
    is_static: true
    code_samples: |
      ```lua
      local f = 0.5
      local angle = Mathf.Acos(f)
      print("Angle in radians: " .. angle)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: float
        default:
        summary: A number representing a cosine, where -1 ≤ f ≤ 1
    returns:
      - type: float
        summary: Angle in radians, within the range [0, π].
  - name: Approximately
    summary: Compares two floating point values for approximate equality, to handle floating point arithmetic inconsistencies.
    is_static: true
    code_samples: |
      ```lua
      local a = 0.1
      local b = 0.2
      local equal = Mathf.Approximately(a, b)
      print("Approximately equal: " .. tostring(equal))
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: float
        default:
        summary: The first number to compare
      - name: b
        type: float
        default:
        summary: The second number to compare
    returns:
      - type: boolean
        summary: True if the values are approximately equal, else false.
  - name: Asin
    summary: Returns the angle in radians whose sine is the specified number, useful for trigonometric operations.
    is_static: true
    code_samples: |
      ```lua
      local f = 0.5
      local angle = Mathf.Asin(f)
      print("Angle in radians: " .. angle)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: float
        default:
        summary: A number representing a sine, where -1 ≤ f ≤ 1
    returns:
      - type: float
        summary: Angle in radians within the range [-1/2π, 1/2π].
  - name: Atan
    summary: Returns the angle in radians whose tangent is the specified number, for trigonometric operations.
    is_static: true
    code_samples: |
      ```lua
      local f = 0.5
      local angle = Mathf.Atan(f)
      print("Angle in radians: " .. angle)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: float
        default:
        summary: A number representing a tangent
    returns:
      - type: float
        summary: Angle in radians within the range [-π/2, π/2].
  - name: Atan2
    summary: Returns the angle in radians whose tan is y/x, useful in game physics calculations.
    is_static: true
    code_samples: |
      ```lua
      local y = 1
      local x = 1
      local angle = Mathf.Atan2(y, x)
      print("Angle in radians: " .. angle)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: y
        type: float
        default:
        summary: The y-coordinate of a point
      - name: x
        type: float
        default:
        summary: The x-coordinate of a point
    returns:
      - type: float
        summary: Angle in radians within the range [-π, π].
  - name: Ceil
    summary: Rounds a number up to the closest integer not less than the specified number, useful for setting upper limit values.
    is_static: true
    code_samples: |
      ```lua
      local f = 5.5
      local ceilValue = Mathf.Ceil(f)
      print("Ceiling value: " .. ceilValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: float
        default:
        summary: The number to round up
    returns:
      - type: float
        summary: The smallest integer not less than f.
  - name: CeilToInt
    summary: Rounds a number up to the nearest integer, returning an integer value, useful when working with discrete values.
    is_static: true
    code_samples: |
      ```lua
      local f = 5.5
      local ceilValue = Mathf.CeilToInt(f)
      print("Ceiling value: " .. ceilValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: float
        default:
        summary: The number to round up
    returns:
      - type: integer
        summary: The smallest integer not less than f.
  - name: Clamp
    summary: Restricts a number to be within a specified range, great for setting limits on variables or return values.
    is_static: true
    code_samples: |
      ```lua
      local value = 5
      local min = 0
      local max = 10
      local clampedValue = Mathf.Clamp(value, min, max)
      print("Clamped value: " .. clampedValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: value
        type: float
        default:
        summary: The number to clamp
      - name: min
        type: float
        default:
        summary: The lower boundary of the range
      - name: max
        type: float
        default:
        summary: The upper boundary of the range
    returns:
      - type: float
        summary: The clamped number between min and max.
  - name: Clamp01
    summary: Restricts a number to be within the range [0,1], handy for ensuring proportions or percentages.
    is_static: true
    code_samples: |
      ```lua
      local value = 5
      local clampedValue = Mathf.Clamp01(value)
      print("Clamped value: " .. clampedValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: value
        type: float
        default:
        summary: The number to clamp
    returns:
      - type: float
        summary: The clamped value between 0 and 1.
  - name: ClosestPowerOfTwo
    summary: Returns the power of two closest to a provided number, useful in texture resolutions.
    is_static: true
    code_samples: |
      ```lua
      local value = 100
      local closestPower = Mathf.ClosestPowerOfTwo(value)
      print("Closest power of two: " .. closestPower)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: value
        type: int32
        default:
        summary: The number to find the closest power of two for
    returns:
      - type: int32
        summary: The power of two closest to the input value.
  - name: Cos
    summary: Computes and returns the cosine of the specified angle in radians, for trigonometric operations.
    is_static: true
    code_samples: |
      ```lua
      local angle = 0.5
      local cosine = Mathf.Cos(angle)
      print("Cosine of the angle: " .. cosine)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: float
        default:
        summary: An angle, in radians
    returns:
      - type: float
        summary: The cosine of the angle.
  - name: DeltaAngle
    summary: Determines and returns the smallest difference between two angles, key to minimal rotation direction.
    is_static: true
    code_samples: |
      ```lua
      local current = 45
      local target = 315
      local delta = Mathf.DeltaAngle(current, target)
      print("Angle difference: " .. delta)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: current
        type: float
        default:
        summary: The first angle, in degrees
      - name: target
        type: float
        default:
        summary: The second angle, in degrees
    returns:
      - type: float
        summary: The shortest angle difference, in degrees.
math_operations:
  - name: Exp
    summary: Calculates 'e' raised to the specified power, essential for exponential growth calculations.
    is_static: true
    code_samples: |
      ```lua
      local power = 2
      local expValue = Mathf.Exp(power)
      print("Exponential value: " .. expValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: power
        type: float
        default:
        summary: The power to raise 'e' to
    returns:
      - type: float
        summary: returns 'e' raised to the given power.
  - name: Floor
    summary: Rounds a number down towards negative infinity to the closest integer, handy for lower limit values.
    is_static: true
    code_samples: |
      ```lua
      local f = 5.5
      local floorValue = Mathf.Floor(f)
      print("Floor value: " .. floorValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: float
        default:
        summary: The number to round down
    returns:
      - type: float
        summary: The largest integer less than or equal to f.
  - name: InverseLerp
    summary: Linearly interpolates between two numbers, returning the fraction of the way between them.
    is_static: true
    code_samples: |
      ```lua
      local a = 0
      local b = 10
      local value = 5
      local fraction = Mathf.InverseLerp(a, b, value)
      print("Fraction: " .. fraction)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: float
        default:
        summary: The start value
      - name: b
        type: float
        default:
        summary: The end value
      - name: value
        type: float
        default:
        summary: The value to interpolate
    returns:
      - type: float
        summary: Fraction of the way the value is between 'a' and 'b'.
  - name: IsPowerOfTwo
    summary: Checks if a number is a power of two, crucial for efficient calculations.
    is_static: true
    code_samples: |
      ```lua
      local value = 16
      local isPower = Mathf.IsPowerOfTwo(value)
      print("Is power of two: " .. tostring(isPower))
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: value
        type: number
        default:
        summary: The number to check
    returns:
      - type: boolean
        summary: True if the number is a power of two, false otherwise.
  - name: Lerp
    summary: Linearly interpolates between two numbers by a specific proportion, common in smoothing transitions.
    is_static: true
    code_samples: |
      ```lua
      local a = 0
      local b = 10
      local t = 0.5
      local interpolatedValue = Mathf.Lerp(a, b, t)
      print("Interpolated value: " .. interpolatedValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: number
        default:
        summary: The start value
      - name: b
        type: number
        default:
        summary: The end value
      - name: t
        type: number
        default:
        summary: The interpolation value, between 0 and 1
    returns:
      - type: number
        summary: The interpolated value between 'a' and 'b'.
  - name: LerpAngle
    summary: Linearly interpolates between two angles, smoothing angle transitions over time.
    is_static: true
    code_samples: |
      ```lua
      local a = 0
      local b = 180
      local t = 0.5
      local interpolatedAngle = Mathf.LerpAngle(a, b, t)
      print("Interpolated angle: " .. interpolatedAngle)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: number
        default:
        summary: The start angle in degrees
      - name: b
        type: number
        default:
        summary: The end angle in degrees
      - name: t
        type: number
        default:
        summary: The interpolation value, between 0 and 1
    returns:
      - type: number
        summary: The interpolated angle in degrees.
  - name: LerpUnclamped
    summary: Linearly interpolates between two numbers based on a third input, allowing values beyond 0 and 1.
    is_static: true
    code_samples: |
      ```lua
      local a = 0
      local b = 10
      local t = 2
      local interpolatedValue = Mathf.LerpUnclamped(a, b, t)
      print("Interpolated value: " .. interpolatedValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: number
        default:
        summary: The start value
      - name: b
        type: number
        default:
        summary: The end value
      - name: t
        type: number
        default:
        summary: The interpolation value, can be beyond 0 to 1
    returns:
      - type: number
        summary: The interpolated value between 'a' and 'b', not clamped.
  # The documentation would continue in a similar format for the remaining methods.
  - name: Log
    summary: Calculates the natural logarithm (base e) of a number, useful in scientific calculations.
    is_static: true
    code_samples: |
      ```lua
      local f = 10
      local logValue = Mathf.Log(f)
      print("Natural logarithm: " .. logValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: number
        default:
        summary: The number to find the logarithm of
    returns:
      - type: number
        summary: The natural logarithm of the number.
  - name: Log10
    summary: Calculates the base 10 logarithm of a number, essential for determining order of magnitude.
    is_static: true
    code_samples: |
      ```lua
      local f = 100
      local logValue = Mathf.Log10(f)
      print("Base 10 logarithm: " .. logValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: number
        default:
        summary: The number to find the logarithm of
    returns:
      - type: number
        summary: The base 10 logarithm of the number.
  - name: Max
    summary: Returns the larger of two or more values, ideal for finding highest scores or largest sizes.
    is_static: true
    code_samples: |
      ```lua
      local values = {5, 10, 15}
      local maxValue = Mathf.Max(values)
      print("Maximum value: " .. maxValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: values
        type: number[]
        default:
        summary: An array of numbers for comparison
    returns:
      - type: number
        summary: The largest value among the given numbers.
  - name: Min
    summary: Returns the smaller of two or more values, practical for setting lower limits or ordering.
    is_static: true
    code_samples: |
      ```lua
      local values = {5, 10, 15}
      local minValue = Mathf.Min(values)
      print("Minimum value: " .. minValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: values
        type: number[]
        default:
        summary: An array of numbers for comparison
    returns:
      - type: number
        summary: The smallest value among the given numbers.
  - name: MoveTowards
    summary: Gradually shifts a number towards a target by a specified maximum step, useful for smooth transitions.
    is_static: true
    code_samples: |
      ```lua
      local current = 5
      local target = 10
      local maxDelta = 2
      local movedValue = Mathf.MoveTowards(current, target, maxDelta)
      print("Moved value: " .. movedValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: current
        type: number
        default:
        summary: The current value
      - name: target
        type: number
        default:
        summary: The target value
      - name: maxDelta
        type: number
        default:
        summary: The maximum step size
    returns:
      - type: number
        summary: The new number, closer to the target.
  - name: MoveTowardsAngle
    summary: Moves the current angle towards a target angle, computing the shortest way around the circle.
    is_static: true
    code_samples: |
      ```lua
      local current = 0
      local target = 180
      local maxDelta = 90
      local movedAngle = Mathf.MoveTowardsAngle(current, target, maxDelta)
      print("Moved angle: " .. movedAngle)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: current
        type: number
        default:
        summary: The current angle in degrees
      - name: target
        type: number
        default:
        summary: The target angle in degrees
      - name: maxDelta
        type: number
        default:
        summary: The maximum angle change allowed per call
    returns:
      - type: number
        summary: The new angle, closer to the target, in degrees.
  - name: NextPowerOfTwo
    summary: Rounds a number up to the next highest power of two, relevant for texture sizes in graphics.
    is_static: true
    code_samples: |
      ```lua
      local value = 100
      local nextPower = Mathf.NextPowerOfTwo(value)
      print("Next power of two: " .. nextPower)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: value
        type: number
        default:
        summary: The number to round up
    returns:
      - type: number
        summary: The next power of two.
  - name: PingPong
    summary: Alternates a value between zero and a maximum, creating oscillating effects.
    is_static: true
    code_samples: |
      ```lua
      local t = 5
      local length = 10
      local pingPongValue = Mathf.PingPong(t, length)
      print("Ping-pong value: " .. pingPongValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: t
        type: number
        default:
        summary: The value to oscillate
      - name: length
        type: number
        default:
        summary: The maximum value
    returns:
      - type: number
        summary: The oscillated value.
  - name: Pow
    summary: Raises a number to a given power, commonly used in growth calculations.
    is_static: true
    code_samples: |
      ```lua
      local f = 2
      local p = 3
      local powValue = Mathf.Pow(f, p)
      print("Power value: " .. powValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: number
        default:
        summary: The base number
      - name: p
        type: number
        default:
        summary: The exponent
    returns:
      - type: number
        summary: The base number raised to the power of the exponent.
  - name: Repeat
    summary: Loops a value so that it never exceeds a certain length, useful for cyclic effects.
    is_static: true
    code_samples: |
      ```lua
      local t = 5
      local length = 10
      local repeatedValue = Mathf.Repeat(t, length)
      print("Repeated value: " .. repeatedValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: t
        type: number
        default:
        summary: The value to loop
      - name: length
        type: number
        default:
        summary: The length of the loop
    returns:
      - type: number
        summary: The looped number, always between 0 and the specified length.
  - name: Round
    summary: Rounds a number to the nearest integer, useful for discrete step or level calculations.
    is_static: true
    code_samples: |
      ```lua
      local f = 5.5
      local roundValue = Mathf.Round(f)
      print("Rounded value: " .. roundValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: number
        default:
        summary: The number to round
    returns:
      - type: number
        summary: The nearest integer.
  - name: Sign
    summary: Returns the sign of a number, determining if it is positive, negative, or zero.
    is_static: true
    code_samples: |
      ```lua
      local a = -5
      local signValue = Mathf.Sign(a)
      print("Sign value: " .. signValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: number
        default:
        summary: The number to check the sign of
    returns:
      - type: number
        summary: 1 if positive or zero, -1 if negative.
  - name: Sin
    summary: Computes the sine of a specified angle in radians, useful in trigonometric calculations.
    is_static: true
    code_samples: |
      ```lua
      local angle = 0.5
      local sine = Mathf.Sin(angle)
      print("Sine of the angle: " .. sine)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: number
        default:
        summary: The angle in radians
    returns:
      - type: number
        summary: The sine of the angle.
  - name: SmoothDamp
    summary: Gradually changes a number towards a desired goal over time, using a damping function.
    is_static: true
    code_samples: |
      ```lua
      local current = 5
      local target = 10
      local currentV = 0
      local smoothTime = 1
      local maxSpeed = 2
      local deltaTime = 0.1
      local smoothedValue, newVelocity = Mathf.SmoothDamp(current, target, currentV, smoothTime, maxSpeed, deltaTime)
      print("Smoothed value: " .. smoothedValue)
      print("New velocity: " .. newVelocity)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: current
        type: number
        default:
        summary: The current value
      - name: target
        type: number
        default:
        summary: The goal value
      - name: currentV
        type: number
        default:
        summary: The current velocity, modified by the method
      - name: smoothTime
        type: number
        default:
        summary: Time to reach the target
      - name: maxS
        type: number
        default:
        summary: Optional maximum speed
      - name: deltaTime
        type: number
        default:
        summary: Time difference since the last call
    returns:
      - type: number, number
        summary: The new smoothed value and the new velocity.
  - name: SmoothDampAngle
    summary: Similar to 'SmoothDamp', but specifically for angles, ensuring smooth rotation towards a target angle.
    is_static: true
    code_samples: |
      ```lua
      local current = 0
      local target = 180
      local currentV = 0
      local smoothTime = 1
      local maxSpeed = 90
      local deltaTime = 0.1
      local smoothedAngle, newVelocity = Mathf.SmoothDampAngle(current, target, currentV, smoothTime, maxSpeed, deltaTime)
      print("Smoothed angle: " .. smoothedAngle)
      print("New velocity: " .. newVelocity)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: current
        type: number
        default:
        summary: The current angle
      - name: target
        type: number
        default:
        summary: The target angle
      - name: currentV
        type: number
        default:
        summary: The current angular velocity
      - name: smoothTime
        type: number
        default:
        summary: Time to reach the target
      - name: maxS
        type: number
        default:
        summary: Optional maximum angular speed
      - name: deltaTime
        type: number
        default:
        summary: Time difference since the last call
    returns:
      - type: number, number
        summary: The new, smoothed angle and the new angular velocity.
  - name: SmoothStep
    summary: Interpolates between two values with smoothing at the start and end, providing ease-in and ease-out effects.
    is_static: true
    code_samples: |
      ```lua
      local a = 0
      local b = 10
      local t = 0.5
      local smoothedValue = Mathf.SmoothStep(a, b, t)
      print("Smoothed value: " .. smoothedValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: from
        type: number
        default:
        summary: The starting value
      - name: to
        type: number
        default:
        summary: The ending value
      - name: t
        type: number
        default:
        summary: The interpolation proportion, between 0 and 1
    returns:
      - type: number
        summary: The smoothed value between 'from' and 'to'.
  - name: Sqrt
    summary: Calculates the square root of a specified number, important in distance and geometry calculations.
    is_static: true
    code_samples: |
      ```lua
      local f = 25
      local sqrtValue = Mathf.Sqrt(f)
      print("Square root: " .. sqrtValue)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: f
        type: number
        default:
        summary: The number to square root
    returns:
      - type: number
        summary: The square root of the number.
  - name: Tan
    summary: Returns the tangent of a specified angle in radians, typically used in trigonometric calculations.
    is_static: true
    code_samples: |
      ```lua
      local angle = 0.5
      local tangent = Mathf.Tan(angle)
      print("Tangent of the angle: " .. tangent)
      ```
    tags:
      - ServerAndClient
    parameters:
      - name: a
        type: number
        default:
        summary: An angle, in radians
    returns:
      - type: number
        summary: The tangent of the angle.
