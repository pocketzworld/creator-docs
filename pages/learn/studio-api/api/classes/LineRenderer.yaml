name: LineRenderer
type: classes
summary: |
  Have you ever wanted to draw lines in your Unity game? Maybe you're creating a laser beam, a route, or even a spider's web. If so, the LineRenderer class is just the tool you need! The LineRenderer class in Unity enables developers to draw a series of connected segments in your scene directly from your scripts.

  LineRenderer is immensely versatile and can be used for almost anything that requires a dynamic line. You can customize the line's appearance using various properties like width, color, and texture. In addition, you can precisely control the line's shape by defining the points that the LineRenderer passes through.

  Want to create a glowing neon trail in a dark room? Or the trajectory of a projectile? The LineRenderer has got you covered. Learn more by visiting [Unity's LineRenderer Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer.html).
description:
code_samples:
inherits:
  - Class.Renderer
constructors:
properties:
  - name: startWidth
    summary: |
      The 'startWidth' property controls the width at the start of the line. Changing this value will make the beginning of the line wider or narrower. Check out [Unity's LineRenderer.startWidth Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-startWidth.html).
    is_static: false
    code_samples:
    type: number
  - name: endWidth
    summary: |
      The 'endWidth' property works similar to 'startWidth', but it controls the width at the end of the line, effectively determining the tapering of the line. More details at [Unity's LineRenderer.endWidth Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-endWidth.html).
    is_static: false
    code_samples:
    type: number
  - name: widthMultiplier
    summary: |
      The 'widthMultiplier' property multiplies the width of the line by a certain factor, effectively scaling the whole line's width. Visit [Unity's LineRenderer.widthMultiplier Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-widthMultiplier.html).
    is_static: false
    code_samples:
    type: number
  - name: numCornerVertices
    summary: |
      The 'numCornerVertices' property influences how many vertices are created when the line bends at a corner. It comes in handy when designing smoother or sharper corners. More information can be found in [Unity's LineRenderer.numCornerVertices Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-numCornerVertices.html).
    is_static: false
    code_samples:
    type: number
  - name: numCapVertices
    summary: |
      The 'numCapVertices' property dictates how many vertices are used to form the end cap of the line, controlling how rounded the end of a line appears. Check the [Unity's LineRenderer.numCapVertices Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-numCapVertices.html).
    is_static: false
    code_samples:
    type: number
  - name: useWorldSpace
    summary: |
      The 'useWorldSpace' property allows the line to move along with the GameObject if set to false, else the line will be drawn in the global space. Visit [Unity's LineRenderer.useWorldSpace Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-useWorldSpace.html).
    is_static: false
    code_samples:
    type: boolean
  - name: loop
    summary: |
      The 'loop' property, when set to true, connects the start and end of the line, forming a continuous loop. Check [Unity's LineRenderer.loop Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-loop.html) for more details.
    is_static: false
    code_samples:
    type: boolean
  - name: startColor
    summary: |
      The 'startColor' property defines the color at the start of the line. You can achieve cool gradient effects by having different start and end colors. See [Unity's LineRenderer.startColor Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-startColor.html).
    is_static: false
    code_samples:
    type: DataType.Color
  - name: endColor
    summary: |
      The 'endColor' property modifies the color at the end of the line. Like 'startColor', this can help to create colorful gradients on your line. Check [Unity's LineRenderer.endColor Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-endColor.html).
    is_static: false
    code_samples:
    type: DataType.Color
  - name: positionCount
    summary: |
      The 'positionCount' property is used to indicate how many vertices the line has, effectively defining the line's complexity. More in [Unity's LineRenderer.positionCount Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-positionCount.html).
    is_static: false
    code_samples:
    type: number
  - name: textureScale
    summary: |
      The 'textureScale' property affects how often a texture is repeated along the line. Check [Unity's LineRenderer.textureScale Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-textureScale.html) for more details.
    is_static: false
    code_samples:
    type: DataType.Vector2
  - name: shadowBias
    summary: |
      The 'shadowBias' helps in eliminating undesired lines by tweaking the rendering of shadows. More details are available in [Unity's LineRenderer.shadowBias Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-shadowBias.html).
    is_static: false
    code_samples:
    type: number
  - name: generateLightingData
    summary: |
      The 'generateLightingData' property decides whether or not to generate lighting data for the line. Check the [Unity's LineRenderer.generateLightingData Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-generateLightingData.html) for more insights.
    is_static: false
    code_samples:
    type: boolean
  - name: widthCurve
    summary: |
      With 'widthCurve', you can apply a complex pattern to the variation of width along the line. It essentially provides you a powerful tool to craft the line's width to your desire. You can find more details in [Unity's LineRenderer.widthCurve Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer-widthCurve.html).
    is_static: false
    code_samples:
    type: Class.AnimationCurve
methods:
  - name: SetPosition
    summary: |
      The 'SetPosition' method allows you to manually set the position of any point along the line. This is important for defining the line's shape. More information can be found on [Unity's LineRenderer.SetPosition Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer.SetPosition.html).
    is_static: false
    code_samples:
    parameters:
      - name: index
        type: number
        default:
        summary: The index of the position to be modified.
      - name: position
        type: DataType.Vector3
        default:
        summary: The new position for the specified point along the line.
    returns:
      - type: void
        summary:
  - name: GetPosition
    summary: |
      The 'GetPosition' method retrieves the position of a particular point along the line, helping in understanding and debugging the line's shape. Visit [Unity's LineRenderer.GetPosition Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer.GetPosition.html) for further insight.
    is_static: false
    code_samples:
    parameters:
      - name: index
        type: number
        default:
        summary: The index of the position to retrieve.
    returns:
      - type: DataType.Vector3
        summary: Returns the current position of the specified point on the line.
  - name: Simplify
    summary: |
      The 'Simplify' method simplifies the shape of the line using the Ramer-Douglas-Peucker algorithm, reducing the number of vertices on the line. This can help to decrease rendering cost. See [Unity's LineRenderer.Simplify Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer.Simplify.html) for more information.
    is_static: false
    code_samples:
    parameters:
      - name: tolerance
        type: number
        default:
        summary: The maximum allowed error when simplifying the line.
    returns:
      - type: void
        summary:
  - name: BakeMesh
    summary: |
      The 'BakeMesh' method allows you to create a static Mesh from the line. This could be extremely useful for saving the state of a line, or for use in other Mesh-based systems. More details can be found on [Unity's LineRenderer.BakeMesh Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/LineRenderer.BakeMesh.html).
    is_static: false
    code_samples:
    parameters:
      - name: mesh
        type: Class.Mesh
        default:
        summary:
      - name: useTransform
        type: boolean
        default:
        summary:
    returns:
      - type: void
        summary:
math_operations:
