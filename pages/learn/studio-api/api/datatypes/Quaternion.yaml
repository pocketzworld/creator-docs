name: Quaternion
type: datatypes
summary: |
  A Quaternion represents rotation and direction in 3D space, consisting of x, y, z, and w components. They are crucial for 3D movement and rotation, offering advantages such as avoiding gimbal lock.
description:
code_samples:
inherits:
constructors:
  - name: new
    summary: Creates a new Quaternion with specified x, y, z, and w components. The default values are 0 for x, y, z, and 1 for w.
    is_static: false
    code_samples: |
      ```lua
      local x = 0
      local y = 0
      local z = 0
      local w = 1

      local quaternion = Quaternion.new(x, y, z, w)
      ```
    parameters:
      - name: x
        type: number
        default:
        summary: The x component.
      - name: y
        type: number
        default:
        summary: The y component.
      - name: z
        type: number
        default:
        summary: The z component.
      - name: w
        type: number
        default:
        summary: The w component.
    returns:
      - type: DataType.Quaternion
        summary: A new Quaternion with given components.
properties:
  - name: eulerAngles
    summary: Returns the rotation of a Quaternion in Euler angles representation. Usually used for debugging and visualizing rotations.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      local euler = quaternion.eulerAngles

      print(euler) -- (0, 0, 0)
      ```
    type: DataType.Vector3
  - name: normalized
    summary: Returns a normalized copy of the Quaternion. Useful for ensuring the Quaternion has a magnitude of 1.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      local normalized = quaternion.normalized

      print(normalized) -- (0, 0, 0, 1)
      ```
    type: DataType.Quaternion
  - name: x
    summary: Represents the x component of the Quaternion. It is the imaginary part of the Quaternion.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      print(quaternion.x) -- 0
      ```
    type: number
  - name: y
    summary: Represents the y component of the Quaternion. It is the imaginary part of the Quaternion.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      print(quaternion.y) -- 0
      ```
    type: number
  - name: z
    summary: Represents the z component of the Quaternion.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      print(quaternion.z) -- 0
      ```
    type: number
  - name: w
    summary: Represents the w (scalar) component of the Quaternion.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      print(quaternion.w) -- 1
      ```
    type: number
  - name: identity
    summary: Represents a Quaternion for no rotation.
    is_static: true
    code_samples:
    type: DataType.Quaternion
  - name: kEpsilon
    summary: Represents a small number greater than zero for comparison.
    is_static: true
    code_samples: |
      ```lua
      local epsilon = Quaternion.kEpsilon
      print(epsilon) -- 1e-6
      ```
    type: number
methods:
  - name: Equals
    summary: Checks if two Quaternions or objects are equal.
    is_static: false
    code_samples: |
      ```lua
      local a = Quaternion.new(0, 0, 0, 1)
      local b = Quaternion.new(0, 0, 0, 1)

      local equal = a:Equals(b)
      print(equal) -- true
      ```
    parameters:
      - name: other
        type: DataType.Quaternion
        default:
        summary: The Quaternion to compare with.
    returns:
      - type: boolean
        summary: Returns true if the Quaternions are equal.
  - name: Set
    summary: Assigns new values to the Quaternion's components.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      quaternion:Set(1, 1, 1, 1)
      ```
    parameters:
      - name: newX
        type: number
        default:
        summary: The new x component.
      - name: newY
        type: number
        default:
        summary: The new y component.
      - name: newZ
        type: number
        default:
        summary: The new z component.
      - name: newW
        type: number
        default:
        summary: The new w component.
    returns:
      - type: void
  - name: SetLookRotation
    summary: Aligns the Quaternion's z-axis towards a target direction.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      local target = Vector3.new(0, 0, 1)

      quaternion:SetLookRotation(target)
      ```
    parameters:
      - name: view
        type: DataType.Vector3
        default:
        summary: The target direction vector.
    returns:
      - type: void
  - name: SetFromToRotation
    summary: Sets the Quaternion to rotate from one direction to another.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      local from = Vector3.new(0, 0, 0)
      local to = Vector3.new(0, 0, 1)

      quaternion:SetFromToRotation(from, to)
      ```
    parameters:
      - name: fromDirection
        type: DataType.Vector3
        default:
        summary: The vector to rotate from.
      - name: toDirection
        type: DataType.Vector3
        default:
        summary: The vector to rotate to.
    returns:
      - type: void
  - name: Normalize
    summary: Modifies the quaternion to a unit length version of itself.
    is_static: false
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      quaternion:Normalize()
      ```
    parameters:
    returns:
      - type: void
  - name: FromToRotation
    summary: Creates a Quaternion that rotates from one direction to another.
    is_static: true
    code_samples: |
      ```lua
      local from = Vector3.new(0, 0, 0)
      local to = Vector3.new(0, 0, 1)

      local quaternion = Quaternion.FromToRotation(from, to)
      ```
    parameters:
      - name: fromDirection
        type: DataType.Vector3
        default:
        summary: The vector to rotate from.
      - name: toDirection
        type: DataType.Vector3
        default:
        summary: The vector to rotate to.
    returns:
      - type: DataType.Quaternion
        summary: A rotation from fromDirection to toDirection.
  - name: Inverse
    summary: Returns the inverse of the Quaternion.
    is_static: true
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      local inverse = Quaternion.Inverse(quaternion)
      ```
    parameters:
      - name: rotation
        type: DataType.Quaternion
        default:
        summary: The rotation to inverse.
    returns:
      - type: DataType.Quaternion
        summary: The inverse rotation.
  - name: Slerp
    summary: Gradually changes a Quaternion from one rotation to another.
    is_static: true
    code_samples: |
      ```lua
      local a = Quaternion.new(0, 0, 0, 1)
      local b = Quaternion.new(0, 0, 1, 0)
      local t = 0.5

      local slerp = Quaternion.Slerp(a, b, t)
      ```
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The starting rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The end rotation.
      - name: t
        type: number
        default:
        summary: The amount to interpolate.
    returns:
      - type: DataType.Quaternion
        summary: An interpolated quaternion rotation.
  - name: SlerpUnclamped
    summary: Interpolates a Quaternion over an arbitrary range.
    is_static: true
    code_samples: |
      ```lua
      local a = Quaternion.new(0, 0, 0, 1)
      local b = Quaternion.new(0, 0, 1, 0)
      local t = 0.5

      local slerp = Quaternion.SlerpUnclamped(a, b, t)
      ```
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The starting rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The end rotation.
      - name: t
        type: number
        default:
        summary: The unclamped interpolation amount.
    returns:
      - type: DataType.Quaternion
        summary: An interpolated quaternion rotation.
  - name: Lerp
    summary: Linearly interpolates between two quaternions.
    is_static: true
    code_samples: |
      ```lua
      local a = Quaternion.new(0, 0, 0, 1)
      local b = Quaternion.new(0, 0, 1, 0)
      local t = 0.5

      local lerp = Quaternion.Lerp(a, b, t)
      ```
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The starting rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The end rotation.
      - name: t
        type: number
        default:
        summary: The amount to interpolate.
    returns:
      - type: DataType.Quaternion
        summary: An interpolated quaternion rotation.
  - name: LerpUnclamped
    summary: |
      The 'LerpUnclamped' method is similar to Lerp, but here the interpolation factor isn't clamped to the range [0, 1].
    is_static: true
    code_samples: |
      ```lua
      local a = Quaternion.new(0, 0, 0, 1)
      local b = Quaternion.new(0, 0, 1, 0)
      local t = 0.5

      local lerp = Quaternion.LerpUnclamped(a, b, t)
      ```
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The starting rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The end rotation.
      - name: t
        type: number
        default:
        summary: The unclamped interpolation amount.
    returns:
      - type: DataType.Quaternion
        summary: Returns a Quaternion that is interpolated over an arbitrary range.
  - name: AngleAxis
    summary: Creates a Quaternion rotation around an axis by a specified angle.
    is_static: true
    code_samples: |
      ```lua
      local angle = 90
      local axis = Vector3.new(0, 1, 0)

      local quaternion = Quaternion.AngleAxis(angle, axis)
      ```
    parameters:
      - name: angle
        type: number
        default:
        summary: The angle of rotation.
      - name: axis
        type: DataType.Vector3
        default:
        summary: The rotation axis.
    returns:
      - type: DataType.Quaternion
        summary: A Quaternion around the specified axis with the given angle.
  - name: LookRotation
    summary: Provides a quaternion that makes an object face towards a specified direction.
    is_static: true
    code_samples: |
      ```lua
      local forward = Vector3.new(0, 0, 1)
      local upwards = Vector3.new(0, 1, 0)

      local quaternion = Quaternion.LookRotation(forward, upwards)
      ```
    parameters:
      - name: forward
        type: DataType.Vector3
        default:
        summary: The direction to be faced.
      - name: upwards
        type: DataType.Vector3
        default:
        summary: The direction to be used as 'upwards'.
    returns:
      - type: DataType.Quaternion
        summary: A Quaternion that aligns an object's forward direction towards the specified direction.
  - name: Multiply
    summary: Multiplies two Quaternions together.
    is_static: true
    code_samples: |
      ```lua
      local a = Quaternion.new(0, 0, 0, 1)
      local b = Quaternion.new(0, 0, 1, 0)

      local multiplied = Quaternion.Multiply(a, b)
      print(multiplied) -- (0, 0, 0, -1)
      ```
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The first Quaternion.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The second Quaternion.
    returns:
      - type: DataType.Quaternion
        summary: The product of the two Quaternions.
  - name: Dot
    summary: Calculates the dot product of two quaternions.
    is_static: true
    code_samples: |
      ```lua
      local a = Quaternion.new(0, 0, 0, 1)
      local b = Quaternion.new(0, 0, 1, 0)

      local dot = Quaternion.Dot(a, b)
      ```
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The first quaternion.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The second quaternion.
    returns:
      - type: number
        summary: The dot product of the two quaternions.
  - name: Angle
    summary: Returns the angle in degrees between two rotations.
    is_static: true
    code_samples: |
      ```lua
      local a = Quaternion.new(0, 0, 0, 1)
      local b = Quaternion.new(0, 0, 1, 0)

      local angle = Quaternion.Angle(a, b)
      ```
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The first rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The second rotation.
    returns:
      - type: number
        summary: The angle in degrees between the two rotations.
  - name: Euler
    summary: Creates a Quaternion rotation from Euler angles.
    is_static: true
    code_samples: |
      ```lua
      local x = 0
      local y = 0
      local z = 0

      local quaternion = Quaternion.Euler(x, y, z)
      ```
    parameters:
      - name: x
        type: number
        default:
        summary: The angle around the x-axis in degrees.
      - name: y
        type: number
        default:
        summary: The angle around the y-axis in degrees.
      - name: z
        type: number
        default:
        summary: The angle around the z-axis in degrees.
    returns:
      - type: DataType.Quaternion
        summary: A Quaternion from the Euler angles.
  - name: RotateTowards
    summary: Gradually changes a Quaternion towards a target rotation.
    is_static: true
    code_samples: |
      ```lua
      local from = Quaternion.new(0, 0, 0, 1)
      local to = Quaternion.new(0, 0, 1, 0)
      local maxDegreesDelta = 0.5

      local rotated = Quaternion.RotateTowards(from, to, maxDegreesDelta)
      ```
    parameters:
      - name: from
        type: DataType.Quaternion
        default:
        summary: The current rotation.
      - name: to
        type: DataType.Quaternion
        default:
        summary: The target rotation.
      - name: maxDegreesDelta
        type: number
        default:
        summary: The maximum number of degrees to rotate by in each call.
    returns:
      - type: DataType.Quaternion
        summary: A Quaternion rotated towards the target.
  - name: Normalize
    summary: Modifies the quaternion to a unit length version of itself.
    is_static: true
    code_samples: |
      ```lua
      local quaternion = Quaternion.new(0, 0, 0, 1)
      local normalized = Quaternion.Normalize(quaternion)
      ```
    parameters:
      - name: q
        type: DataType.Quaternion
        default:
        summary: The Quaternion to be normalized.
    returns:
      - type: DataType.Quaternion
        summary: The normalized version of the quaternion.