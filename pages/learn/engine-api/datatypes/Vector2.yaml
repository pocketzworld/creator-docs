name: Vector2
type: datatypes
summary: |
  The 'Vector2' data type in Unity represents a two dimensional vector â€“ a quantity that has both magnitude (or length) and direction, but in 2D Space. It is commonly used for representing positions, velocities, and directions in a two-dimensional space such as a game screen or 2D physics simulation. For in-depth understanding, you can check the [official Unity documentation for Vector2](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.html).
description:
code_samples:
inherits:
constructors:
  - name: new
    summary: |
      The 'new' constructor creates a new instance of a Vector2, with the specified 'x' and 'y' components. The resulting Vector2 can represent a point in space or a direction based on how you use it. For more details, you can refer to the [official Unity documentation for Vector2.new](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-ctor.html).
    description:
    is_static: false
    code_samples:
    parameters:
      - name: x
        type: number
        default:
        summary: The 'x' component of the Vector2.
      - name: y
        type: number
        default:
        summary: The 'y' component of the Vector2.
    returns:
      - type: DataType.Vector2
        summary: Returns a new Vector2 instance with the specified 'x' and 'y' components.
properties:
  - name: normalized
    summary: |
      The 'normalized' property gives you a normalized version of the Vector2. Normalizing a vector often proves useful in game development scenarios as it allows you to treat the vector as a pure direction, without concern for its length. For more info, see the [official Unity Vector2.normalized documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-normalized.html).
    description:
    is_static: false
    code_samples:
    type: DataType.Vector2
  - name: magnitude
    summary: |
      The 'magnitude' property provides the length of the Vector2. The length or magnitude of a vector is useful in a variety of cases such as determining distances, understanding the velocity of an object etc. You can learn more through [Vector2.magnitude from Unity's documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-magnitude.html).
    description:
    is_static: false
    code_samples:
    type: number
  - name: sqrMagnitude
    summary: |
      The 'sqrMagnitude' property gives you the square of the magnitude of the Vector2. It's a more performance-friendly way of comparing lengths of vectors, since it avoids the costly square root operation used in the 'magnitude' computation. For more information, refer to the [official Unity Vector2.sqrMagnitude documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-sqrMagnitude.html).
    description:
    is_static: false
    code_samples:
    type: number
  - name: x
    summary: |
      The 'x' property allows you to access the x-component of the Vector2. This property may represent a horizontal coordinate in 2D space, or any other data depending on the context. More insight is available in the [official Unity documentation on Vector2.x](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-x.html).
    description:
    is_static: false
    code_samples:
    type: number
  - name: y
    summary: |
      The 'y' property gives you the access to y-component of the Vector2. This might represent a vertical coordinate in 2D space, or hold any other value based on the usage scenario. For more details, refer to the [official Unity documentation on Vector2.y](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-y.html).
    description:
    is_static: false
    code_samples:
    type: number
  - name: zero
    summary: |
      The 'zero' property generates a Vector2 instance with both its components (x and y) set to zero. This represents the origin in a 2D space or can indicate no movement or rotation. For in-depth understanding, refer to [Unity's Vector2.zero Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-zero.html).
    description:
    is_static: true
    code_samples:
    type: DataType.Vector2
  - name: one
    summary: |
      The 'one' property provides a new Vector2 instance with both x and y components set to 1. This is particularly handy when needing a normalized Vector2 that points diagonally in a 2D plane. Check out [Unity's Vector2.one Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-one.html) for more insights.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector2
  - name: up
    summary: |
      The 'up' property generates a new Vector2 instance that points upwards (the positive y direction). This property can be especially useful when needing to specify an 'upwards' direction in the 2D world. For further details, refer to [Unity's Vector2.up Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-up.html).
    description:
    is_static: true
    code_samples:
    type: DataType.Vector2
  - name: down
    summary: |
      The 'down' property provides a new Vector2 instance that points downwards (the negative y direction). It is mostly used when there is a need to specify a 'downwards' direction in the 2D world. More details can be found in [Unity's Vector2.down Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-down.html).
    description:
    is_static: true
    code_samples:
    type: DataType.Vector2
  - name: left
    summary: |
      The 'left' property returns a Vector2 instance that points to the left (the negative x direction). Mostly used when you need to point or move objects in the 'leftwards' direction in the 2D scene. You can get more information from [Unity's Vector2.left Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-left.html).
    description:
    is_static: true
    code_samples:
    type: DataType.Vector2
  - name: right
    summary: |
      The 'right' property lends you a Vector2 that points towards the right (the positive x direction). It is used often when you want to point or move objects in the 'rightwards' direction in the 2D space. For more specifics, check the [Unity's Vector2.right Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-right.html).
    description:
    is_static: true
    code_samples:
    type: DataType.Vector2
  - name: positiveInfinity
    summary: |
      The 'positiveInfinity' property delivers a Vector2 with both x and y components set to positive infinity. This property is handy when you need a Vector2 with the largest possible value. Visit [Unity's Vector2.positiveInfinity Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-positiveInfinity.html) for more insights.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector2
  - name: negativeInfinity
    summary: |
      The 'negativeInfinity' property affords a Vector2 with both x and y components set to negative infinity, providing the smallest possible Vector2 value. More information is available at [Unity's Vector2.negativeInfinity Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-negativeInfinity.html).
    description:
    is_static: true
    code_samples:
    type: DataType.Vector2
  - name: kEpsilon
    summary: |
      The 'kEpsilon' property holds a very small positive number bigger than zero. While dealing with Vector2s, it is generally used to check if its components are approximately equal to zero, considering the minute errors due to floating point precision. To delve deeper, check [Unity's Vector2.kEpsilon Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-kEpsilon.html).
    description:
    is_static: true
    code_samples:
    type: number
  - name: kEpsilonNormalSqrt
    summary: |
      The 'kEpsilonNormalSqrt' property contains a minute, positive number primarily used in Vector2 computations that need a square root operation, representing an insignificant threshold value when comparing Vector2 magnitudes. More details can be found in [Unity's Vector2.kEpsilonNormalSqrt Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-kEpsilonNormalSqrt.html).
    description:
    is_static: true
    code_samples:
    type: number
methods:
  - name: Set
    summary: |
      The 'Set' method allows you to change the x and y components of the Vector2 at once. It's a quicker alternative than setting the 'x' and 'y' components individually. For its usage and further details, you can check the [Unity's Vector2.Set documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Set.html).
    description:
    is_static: false
    code_samples:
    parameters:
      - name: newX
        type: number
        default:
        summary: The new 'x' component for the Vector2.
      - name: newY
        type: number
        default:
        summary: The new 'y' component for the Vector2.
    returns:
      - type: void
        summary:
  - name: Scale
    summary: |
      The 'Scale' method lets you scale the Vector2 by another Vector2's components. This means 'x' components will multiply each other, as well will the 'y' components. For example, if you're scaling Vector2(2, 3) by Vector2(2, 2), the resultant Vector2 will be Vector2(4, 6). To know more, see the [official Unity Vector2.Scale documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Scale.html).
    description:
    is_static: false
    code_samples:
    parameters:
      - name: scale
        type: DataType.Vector2
        default:
        summary: The Vector2 to scale by.
    returns:
      - type: void
        summary:
  - name: Normalize
    summary: |
      The 'Normalize' method changes the Vector2 into a direction vector - it maintains its direction but its length becomes 1. This proves useful when the direction of a vector is important but not its length. For a deeper understanding, refer to the [official Unity Vector2.Normalize Documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Normalize.html).
    description:
    is_static: false
    code_samples:
    parameters:
    returns:
      - type: void
        summary:
  - name: SqrMagnitude
    summary: |
      The 'SqrMagnitude' method provides the square of the magnitude (length) of the Vector2. Much like the 'sqrMagnitude' property, it's a performance-friendly way of comparing lengths because it skips the computationally expensive square root operation. More information can be found in the [official Unity Vector2.SqrMagnitude documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.SqrMagnitude.html).
    description:
    is_static: false
    code_samples:
    parameters:
    returns:
      - type: number
        summary: Returns the square of the magnitude (length) of the Vector2.
  - name: Lerp
    summary: |
      The 'Lerp' method does a Linear Interpolation between two Vector2's based on a 't' parameter and returns a new interpolated Vector2. When 't' is 0, it returns 'a'. If 't' is 1, it returns 'b'. At any other 't' value, it gives a point along the line between 'a' and 'b'. To know more, check out [the official Unity documentation for Vector2.Lerp](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Lerp.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector2
        default:
        summary: The first Vector2.
      - name: b
        type: DataType.Vector2
        default:
        summary: The second Vector2.
      - name: t
        type: number
        default:
        summary: The interpolation factor.
    returns:
      - type: DataType.Vector2
        summary: Returns an Interpolated Vector2 produced by the 'Lerp' operation.
  - name: LerpUnclamped
    summary: |
      The 'LerpUnclamped' method does a Linear Interpolation between two Vector2's like 'Lerp', but unlike 'Lerp', it doesn't clamp the 't' parameter between 0 and 1. So, the resultant Vector2 can be before 'a' or after 'b'. To understand more, see [Unity's Vector2.LerpUnclamped documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.LerpUnclamped.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector2
        default:
        summary: The starting Vector2.
      - name: b
        type: DataType.Vector2
        default:
        summary: The ending Vector2.
      - name: t
        type: number
        default:
        summary: The interpolation factor.
    returns:
      - type: DataType.Vector2
        summary: Returns an unclamped interpolated Vector2.
  - name: MoveTowards
    summary: |
      The 'MoveTowards' method moves a Vector2 'current' towards another Vector2 'target'. The movement is along a straight line and the third parameter 'maxDistanceDelta' is the maximum distance 'current' can move. For more details, see [Unity's Vector2.MoveTowards documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.MoveTowards.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: current
        type: DataType.Vector2
        default:
        summary: The current Vector2.
      - name: target
        type: DataType.Vector2
        default:
        summary: The target Vector2.
      - name: maxDistanceDelta
        type: number
        default:
        summary: The maximum distance 'current' Vector2 can move.
    returns:
      - type: DataType.Vector2
        summary: Returns a Vector2 that has moved towards the target.
  - name: Scale
    summary: |
      The static 'Scale' method multiplies two Vector2's component-wise. So, if you're scaling Vector2(2, 3) by Vector2(2, 2), the result will be Vector2(4, 6). To know more, see the [official Unity Vector2.Scale documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Scale.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector2
        default:
        summary: The first Vector2.
      - name: b
        type: DataType.Vector2
        default:
        summary: The second Vector2.
    returns:
      - type: DataType.Vector2
        summary: Returns a new Vector2 that is the result of the component-wise multiplication.
  - name: Reflect
    summary: |
      The 'Reflect' method reflects a Vector2 'inDirection' off another Vector2 'inNormal'. This can be very useful in physics and optics related problems where a direction Vector2 bounces off a surface with a specific normal. For more information, you can refer to the [official Unity documentation for Vector2.Reflect](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Reflect.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: inDirection
        type: DataType.Vector2
        default:
        summary: The direction Vector2.
      - name: inNormal
        type: DataType.Vector2
        default:
        summary: The normal Vector2.
    returns:
      - type: DataType.Vector2
        summary: Returns a new Vector2 that is the reflection of 'inDirection' off 'inNormal'.
  - name: Perpendicular
    summary: |
      The 'Perpendicular' method calculates a new Vector2 that is perpendicular (or orthogonal) to the input Vector2 'inDirection'. This can be useful in calculus or geometry problems where finding a perpendicular Vector2 to a given Vector2 is essential. You can refer to the [official Unity documentation on Vector2.Perpendicular](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Perpendicular.html) for more details.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: inDirection
        type: DataType.Vector2
        default:
        summary: The Vector2 from which to calculate the perpendicular Vector2.
    returns:
      - type: DataType.Vector2
        summary: Returns a new Vector2 that is perpendicular to the 'inDirection' Vector2.
  - name: Dot
    summary: |
      The 'Dot' method computes the dot product of two Vector2's. The dot product is a scalar value that is the result of the multiplication of both vectors' lengths and the cosine of the angle between them. It's a fundamental operation in vector algebra. More details can be found in the [official Unity Vector2.Dot documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Dot.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: lhs
        type: DataType.Vector2
        default:
        summary: The first Vector2.
      - name: rhs
        type: DataType.Vector2
        default:
        summary: The second Vector2.
    returns:
      - type: number
        summary: Returns the dot product of the two Vector2's.
  - name: Angle
    summary: |
      The 'Angle' method calculates the angle (in degrees) between two Vector2's. The result is the smallest possible non-negative rotation that could be performed to get from the first Vector2 to the second. More info can be found in the [official Unity documentation on Vector2.Angle](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Angle.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: from
        type: DataType.Vector2
        default:
        summary: The Vector2 from which the angle is measured.
      - name: to
        type: DataType.Vector2
        default:
        summary: The Vector2 to which the angle is measured.
    returns:
      - type: number
        summary: Returns the angle in degrees.
  - name: SignedAngle
    summary: |
      The 'SignedAngle' method calculates the angle (in degrees) between two Vector2's. The result is positive if 'to' is clockwise from 'from'. If 'to' is counterclockwise from 'from', it will be negative. For a deeper understanding, refer to [Unity's Vector2.SignedAngle documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.SignedAngle.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: from
        type: DataType.Vector2
        default:
        summary: The Vector2 from which the angle is computed.
      - name: to
        type: DataType.Vector2
        default:
        summary: The Vector2 to which the angle is computed.
    returns:
      - type: number
        summary: Returns the signed angle in degrees.
  - name: Distance
    summary: |
      The 'Distance' method calculates the distance between two Vector2's. The distance is the length of the line segment connecting the two Vector2's. It's very useful for areas like finding out how far apart two game objects are. For more information, you can check out [Unity's Vector2.Distance documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Distance.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector2
        default:
        summary: The first Vector2.
      - name: b
        type: DataType.Vector2
        default:
        summary: The second Vector2.
    returns:
      - type: number
        summary: Returns the distance between the two Vector2's.
  - name: ClampMagnitude
    summary: |
      The 'ClampMagnitude' method limits the length (or magnitude) of a Vector2 to a maximum length 'maxLength'. It's useful when you want to limit the speed of a game object, represented by a Vector2. More details can be found in the [official Unity Vector2.ClampMagnitude documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.ClampMagnitude.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: vector
        type: DataType.Vector2
        default:
        summary: The Vector2 whose magnitude is to be clamped.
      - name: maxLength
        type: number
        default:
        summary: The maximum magnitude.
    returns:
      - type: DataType.Vector2
        summary: Returns a new Vector2 with a clamped magnitude.
  - name: SqrMagnitude
    summary: |
      The static 'SqrMagnitude' method gives the square of the magnitude (length) of a Vector2, like the instance 'sqrMagnitude' property. This variant can be useful when you want to compute the magnitude without creating a specific Vector2 object. More details can be found in [Unity's Vector2.SqrMagnitude documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.SqrMagnitude.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector2
        default:
        summary: The Vector2 whose magnitude is to be squared.
    returns:
      - type: number
        summary: Returns the square of the magnitude.
  - name: Min
    summary: |
      The 'Min' method provides the Vector2 whose components are the minimum of corresponding components of two provided Vector2's. In other words, each component of the returned Vector2 is the smaller value of the corresponding component in the input Vector2's. To know more, check the [official Unity Vector2.Min documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Min.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: lhs
        type: DataType.Vector2
        default:
        summary: The first Vector2.
      - name: rhs
        type: DataType.Vector2
        default:
        summary: The second Vector2.
    returns:
      - type: DataType.Vector2
        summary: Returns a new Vector2 whose components are the minimum of the corresponding components of the input Vector2's.
  - name: Max
    summary: |
      The 'Max' method provides the Vector2 whose components are the maximum of corresponding components of two provided Vector2's. Each component of the returned Vector2 is the greater value of the corresponding component in the input Vector2's. For a better understanding, refer to the [official Unity Vector2.Max documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2.Max.html).
    description:
    is_static: true
    code_samples:
    parameters:
      - name: lhs
        type: DataType.Vector2
        default:
        summary: The first Vector2.
      - name: rhs
        type: DataType.Vector2
        default:
        summary: The second Vector2.
    returns:
      - type: DataType.Vector2
        summary: Returns a new Vector2 whose components are the maximum of the corresponding components of the input Vector2's.
math_operations:
  - operation: "=="
    summary: |
      The '==' operator checks if two Vector2's are equal, both in x and y components. If both x's are equal and both y's are equal, it returns true. Otherwise, it returns false. More details can be gathered from the [official Unity Vector2.operator_eq documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-operator_eq.html).
    description:
    type_a: Vector2
    type_b: Vector2
    return_type: boolean
    code_samples:
  - operation: "/"
    summary: |
      The '/' operator allows you to divide each component of a Vector2 by a number. So, if you divide Vector2(4, 6) by 2, the result will be Vector2(2, 3). More details can be found in the [official Unity Vector2.operator_divide documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-operator_divide.html).
    description:
    type_a: Vector2
    type_b: number
    return_type: Vector2
    code_samples:
  - operation: "*"
    summary: |
      The '*' operator lets you multiply a number and a Vector2. It returns a new Vector2 where each component of the original Vector2 has been multiplied by the number. For example, 2 * Vector2(2, 3) results in Vector2(4, 6). More info can be found in the [official Unity Vector2.operator_multiply documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-operator_multiply.html).
    description:
    type_a: number
    type_b: Vector2
    return_type: Vector2
    code_samples:
  - operation: "-"
    summary: |
      The '-' operator applied to one Vector2 simply negates the 'x' and 'y' components of the Vector2. So, if you have a Vector2(2, 3), applying '-' would result in Vector2(-2, -3). This operation can be helpful in flipping the direction of a Vector2.
    description:
    type_a: Vector2
    type_b:
    return_type: Vector2
    code_samples:
  - operation: "-"
    summary: |
      The '-' operator can be used between two Vector2's to subtract the second one from the first one component-wise. So, Vector2(4, 6) - Vector2(2, 3) will yield Vector2(2, 3). This operation is often used to find the relative Vector2 from one position to another. More details can be found in the [official Unity Vector2.operator_subtract documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-operator_subtract.html).
    description:
    type_a: Vector2
    type_b: Vector2
    return_type: Vector2
    code_samples:
  - operation: "+"
    summary: |
      The '+' operator adds two Vector2's together, component-wise. Hence if you're adding Vector2(2, 3) and Vector2(4, 6), the resultant Vector2 will be Vector2(6, 9). This operation is often used for combining offsets or changes. For its usage and further details, you can check the [official Unity Vector2.operator_add documentation](https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Vector2-operator_add.html).
    description:
    type_a: Vector2
    type_b: Vector2
    return_type: Vector2
    code_samples:
