name: Player
type: classes
summary: |
  The 'Player' class in Highrise represents each individual participant in the game. It is a crucial element, acting as the bridge between the player's real-world actions and their in-game avatar's behaviors. The class comprises the 'name' attribute of the players for easy identification, and an 'avatar' object that maps to the player's in-game character. It also includes event-based methods that respond to specific activities such as the instantiation and destruction of a player's avatar.
description:
code_samples: |
  ```lua
    local localAvatarConnection = nil
    localAvatarConnection = client.localPlayer.AvatarInstantiated:Connect(function(player, avatar)
      OnLocalAvatar(player, avatar)
    end)

    function OnLocalAvatar(player, avatar)
      localAvatarConnection:Disconnect()
      localAvatarConnection = nil

      print("The local user's avatar has finished loading and has now spawned!")
    end

    client.PlayerConnected:Connect(function(player)
      print("Another player has connected named " .. player.name)
    end)
  ```
inherits:
constructors:
properties:
  - name: name
    summary: |
      The 'name' property holds the name of the player. This can be used to identify the player in the game, for example, in the chat or in the leaderboard.
    description:
    is_static: false
    tags:
      - ClientAndServer
    code_samples:
    type: string
  - name: avatar
    summary: |
      This property gives you access to the local player's avatar. It allows you to manipulate the avatar's properties and behavior, such as changing its appearance or controlling its movement.
    description:
    is_static: false
    tags:
      - ClientAndServer
    code_samples:
    type: Class.Avatar
  - name: AvatarInstantiated
    summary: |
      An event that is triggered when the local player's avatar is instantiated. This is useful for performing actions that require the avatar to be fully loaded and ready to be manipulated.
    description:
    is_static: false
    tags:
      - ClientAndServer
    parameters:
    code_samples:
    returns:
    type: Class.Event
  - name: AvatarDestroyed
    summary: |
      An event that is set off when a player disconnects from the game. This feature is crucial in managing actions that follow a player's disconnection.
    description:
    is_static: false
    tags:
      - ClientAndServer
    parameters:
    code_samples:
    returns:
    type: Class.Event
methods:
  - name: InstantiateAvatar
    summary: |
      An event that is set off when a player disconnects from the game. This feature is crucial in managing actions that follow a player's disconnection.
    description:
    is_static: false
    tags:
      - ServerOnly
    parameters:
      - name: position
        type: DataType.Vector3
        default:
        summary: The position where the avatar should be instantiated.
      - name: rotation
        type: DataType.Vector3
        default:
        summary: The euler angles of the avatar when it is instantiated.
    code_samples:
    returns:
      - type: Class.Avatar
        summary: This method fires off an Event indicating that a player has just disconnected from the game.
math_operations:
