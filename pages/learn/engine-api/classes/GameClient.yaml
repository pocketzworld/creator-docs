name: GameClient
type: classes
summary: |
  In Highrise's scripting environment, the GameClient class acts as the high-level game context the script is running in. Any client-level interaction or manipulation will be found in this class. Specifically, scripts marked 'Client' or 'Client and Server' can access client - with 'Client and Server' requiring you to check if `client` is not nil (or `server` is nil).

  The GameClient is essential for managing critical client-specific activities, such as identifying the local player or the main camera. It also enables responding to events like the connection and disconnection of players during gameplay.

  It stands as the bridge between local operations and the expansive game environment, providing a hassle-free way to tap into and manage client-side functionalities.
description:
code_samples: |
  ```lua
    local localAvatarConnection = nil
    localAvatarConnection = client.localPlayer.AvatarInstantiated:Connect(function(player, avatar)
      OnLocalAvatar(player, avatar)
    end)

    function OnLocalAvatar(player, avatar)
      localAvatarConnection:Disconnect()
      localAvatarConnection = nil

      print("The local user's avatar has finished loading and has now spawned!")
    end

    client.PlayerConnected:Connect(function(player)
      print("Another player has connected named " .. player.name)
    end)
  ```
inherits:
constructors:
properties:
  - name: localPlayer
    summary: |
      This property provides a direct handle to the game's local player from the client's perspective, facilitating easy interaction and local player management.
    description:
    is_static: false
    code_samples:
    type: Class.Player
  - name: mainCamera
    summary: |
      This property helps you obtain the main camera for the game client. It fetches the first active, enabled camera tagged as "MainCamera" in the scene. If no such camera is found, it returns nil.
    description:
    is_static: false
    code_samples:
    type: Class.Camera
  - name: PlayerConnected
    summary: |
      An event that is triggered when a new player gets connected to the game. This mechanism allows developers to trigger specific actions in response to a player's connection. Note that this is not when the player's Class.Avatar is spawned. For avatar spawn, see Class.Player .
    description:
    is_static: false
    code_samples:
    returns:
    type: Class.Event
  - name: PlayerDisconnected
    summary: |
      An event that is set off when a player disconnects from the game. This feature is crucial in managing actions that follow a player's disconnection.
    description:
    is_static: false
    code_samples:
    type: Class.Event
methods:
math_operations:
