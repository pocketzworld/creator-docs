name: Event
type: classes
summary: |
  In the realm of event-driven programming, an 'event' corresponds to a specific moment or occurrence to which we attach significance. The Event class in Highrise encapsulates this idea, signifying specific moments or changes within the game environment that are worth reacting to. 

  For instance, consider a scenario where a player joins or leaves a game. These situations can be construed as 'events'. With each occurrence of such an event, specific actions or responses need to be triggered: Maybe display a welcome message when a player joins, or update the player count when a player leaves.

  The Event class caters to these needs, providing methods to 'fire' or trigger actions on the occurrence of these events, either on the client-side (on the user's device), all clients, or on the server. Importantly, the Event class also provides the ability to 'connect' events to specific functions responsible for carrying out these actions or responses. This is incredibly useful in creating a dynamic and reactive gaming environment in Highrise.

description:
code_samples:
inherits:
tags:
  - ServerAndClient
constructors:
  - name: new
    summary: |
      Creates a new instance of the Event class. In essence, this means defining a new incident or event in the Highrise game that is worthy of triggering specific actions or responses.
    is_static: true
    tags:
      - ServerAndClient
    code_samples:
    parameters:
    returns:
      - type: Event
        summary: Returns an instance of the Event class representing the newly defined event.
properties:
  - name: name
    summary: |
      This property denotes the name or identifier of the particular event, which could be anything like 'PlayerJoined' or 'PlayerMoved'.
    is_static: false
    tags:
      - ServerAndClient
    code_samples:
    type: string
methods:
  - name: FireClient
    summary: |
      This method triggers or 'fires' the event on a specific client's side, i.e., the user's device. For instance, this might be useful to display a custom message on a player's screen.
    is_static: false
    tags:
      - ServerAndClient
    code_samples:
    parameters:
    returns:
      - type: void
        summary: The method does not return a value.
  - name: FireAllClients
    summary: |
      This method triggers the event across all connected clients - useful for game-wide notifications like an announcement reaching all players or for a server to relay information about one client to the rest.
    is_static: false
    code_samples:
    tags:
      - ServerOnly
    parameters:
    returns:
      - type: void
        summary: The method does not return any value.
  - name: FireServer
    summary: |
      This method triggers the event on the game server. For instance, an event might prompt the server to update the game state or the leaderboard.
    is_static: false
    code_samples:
    parameters:
    returns:
      - type: void
        summary: The method does not return any value.
  - name: Connect
    summary: |
      This method is employed to create a connection between an event and a specific function. When the event is 'fired', the connected function is also automatically executed or 'called'.
    is_static: false
    code_samples:
    tags:
      - ServerAndClient
    parameters:
    returns:
      - type: Class.EventConnection
        summary: Returns an EventConnection instance, representing the newly formed connection between the event and the function.
math_operations:
