name: Player
type: classes
summary: |
  The 'Player' class in Highrise represents each individual participant in the game. It is a crucial element, acting as the bridge between the player's real-world actions and their in-game avatar's behaviors. The class comprises the 'name' attribute of the players for easy identification, and an 'avatar' object that maps to the player's in-game character. It also includes event-based methods that respond to specific activities such as the instantiation and destruction of a player's avatar.
description:
code_samples: |
  ```lua
    scene.PlayerJoined:Connect(function(scene, player)
      player.CharacterChanged:Connect(function(player, newCharacter, oldCharacter)
        if not oldCharacter then
          -- Player just got a new character! Do any setup here
        end
      end)
    end)
  ```
inherits:
constructors:
properties:
  - name: chatBubbleTransform
    summary: |

    description:
    is_static: false
    code_samples:
    type: Class.Transform
  - name: name
    summary: |
      The 'name' property holds the name of the player. This can be used to identify the player in the game, for example, in the chat or in the leaderboard.
    is_static: false
    tags:
      - ClientAndServer
    code_samples:
    type: string
  - name: id
    summary: |
      The 'id' property holds the unique identifier of the player. This is an alternative way to track players via number.
    is_static: false
    tags:
      - ClientAndServer
    code_samples:
    type: number
  - name: character
    summary: |
      This property gives you access to the player's. It allows you to manipulate the character's properties and behavior, such as changing its appearance or controlling its movement.

      Only server scripts can set the character
    is_static: false
    tags:
      - ClientAndServer
    code_samples:
    type: Class.Character
  - name: CharacterChanged
    summary: |
      An event that is triggered when the player's character is changed. This is useful for performing actions that need to be executed when the player's character is updated, including from nil to anything.

      Parameters are Player player, Character newCharacter, Character oldCharacter
    is_static: false
    tags:
      - ClientAndServer
    parameters:
    code_samples:
    returns:
    type: Class.Event
methods:
math_operations:
